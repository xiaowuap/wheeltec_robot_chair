amcl:
  ros__parameters:
    use_sim_time: False
    alpha1: 0.9   #里程计的旋转估计中来自旋转的预期过程噪声
    alpha2: 0.1   #里程计的旋转估计中来自平移的预期过程噪声
    alpha3: 0.05  #里程计的翻译估计中来自translation的预期过程噪声
    alpha4: 0.01  #里程计的平移估计中因旋转而产生的预期过程噪声
    alpha5: 0.04  #仅适用于 Omni 型号：translation噪音
    base_frame_id: "base_footprint" #机器人底座框架 
    beam_skip_distance: 0.5         #忽略似然场模型中大多数粒子不同意的光束。考虑跳过的最大距离（米）
    beam_skip_error_threshold: 0.9  #由于收敛性不好，未匹配地图后强制进行完全更新的光束百分比
    beam_skip_threshold: 0.3        #需要跳过的光束的百分比。
    do_beamskip: false              #是否在似然场模型中进行波束跳跃
    global_frame_id: "map"          #定位系统发布的坐标框架的名称
    lambda_short: 0.1               #模型 z_short 部分的指数衰减参数
    laser_likelihood_max_dist: 2.0  #在地图上进行障碍物膨胀的最大距离，用于似然场模型
    laser_max_range: 100.0          #要考虑的最大扫描范围，-1.0 将导致使用激光报告的最大范围
    laser_min_range: -1.0           #要考虑的最小扫描范围，-1.0 将导致使用激光报告的最小范围
    laser_model_type: "likelihood_field" #使用哪种模型，
    #beam、likelihood_field 或 unlikely_field_prob。与 unlikely_field 相同，但如果启用，则包含 beamskip 功能
    max_beams: 60                   #更新过滤器时每次扫描要使用多少个均匀分布的光束。
    max_particles: 2000             #允许的最大粒子数
    min_particles: 500              #允许的最小粒子数
    odom_frame_id: "odom_combined"  #使用哪个框架进行里程计
    pf_err: 0.02                    #粒子过滤器群体误差
    pf_z: 0.85                      #粒子过滤器群体密度
    recovery_alpha_fast: 0.0        #快速平均权重过滤器的指数衰减率，用于决定何时通过添加随机姿势进行恢复。
    recovery_alpha_slow: 0.0        #慢速平均权重过滤器的指数衰减率，用于决定何时通过添加随机姿势进行恢复。
    resample_interval: 2            #重采样之前所需的过滤器更新次数
    robot_model_type: "nav2_amcl::DifferentialMotionModel" #插件类的完全限定类型。
    #选项为“nav2_amcl::DifferentialMotionModel”和“nav2_amcl::OmniMotionModel”。
    save_pose_rate: 0.5             #将最后估计的姿势和协方差存储到参数服务器的最大速率（Hz）
    sigma_hit: 0.02                 #模型的 z_hit 部分中使用的高斯模型的标准差
    tf_broadcast: true              #将其设置为 false 以防止 amcl 发布全局框架和里程计框架之间的变换
    transform_tolerance: 0.3        #发布转换的容差
    update_min_a: 0.06              #执行过滤器更新之前需要进行旋转运动。
    update_min_d: 0.025             #执行过滤器更新之前需要进行平移运动
    z_hit: 0.7                      #模型的 z_hit 部分的混合权重，所有使用的 z 权重之和必须为 1。
    z_max: 0.001                    #模型的 z_max 部分的混合权重，所有使用的 z 权重之和必须为 1。
    z_rand: 0.059                   #模型的 z_rand 部分的混合权重，所有使用的 z 权重之和必须为 1。
    z_short: 0.24                   #模型中 z_short 部分的混合权重，所有使用的 z 权重之和必须为 1。
    scan_topic: scan                #要订阅的激光雷达

    # Initial Pose
    set_initial_pose: True #AMCL 从 initial_pose* 参数设置初始姿势，而不是等待 initial_pose 消息
    initial_pose.x: 0.0
    initial_pose.y: 0.0
    initial_pose.z: 0.0
    initial_pose.yaw: 0.0
    #Amcl参数解释参考：https://docs.nav2.org/configuration/packages/configuring-amcl.html

amcl_map_client:
  ros__parameters:
    use_sim_time: False

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator:
  ros__parameters:
    use_sim_time: False
    transform_tolerance: 0.1 #变换容差
    goal_reached_tol: 0.25 #接受姿势作为目标的容忍度(m)
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odom_combined
    bt_loop_duration: 10        #BT 执行每次迭代的持续时间（以毫秒为单位
    default_server_timeout: 20  #BT 操作节点等待操作服务器确认时的默认超时值（以毫秒为单位）
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    #plugin_lib_names: #行为树节点共享库列表，Humble后的版本默认包含所有NAV2 BT库，这里可以加入自定义BT节点
    error_code_names:
    - compute_path_error_code 
    - follow_path_error_code
# bt_navigator参数说明：https://docs.nav2.org/configuration/packages/configuring-bt-navigator.html?highlight=bt_navigator

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False
 
controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0                #运行控制器的频率
    min_x_velocity_threshold: -0.35           #最小 x 速度阈值
    min_y_velocity_threshold: 0.35             #最小 y 速度阈值
    min_theta_velocity_threshold: 0.001       #最小速度阈值
    odom_topic: /odom_combined
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["goal_checker"]
    controller_plugins: ["FollowPath"]

    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5            #所需运动半径
      movement_time_allowance: 10.0            #移动时间容差
    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25                  #xy 目标容差
      yaw_goal_tolerance: 0.25                 #yaw目标容差
      stateful: True
    FollowPath:
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 0.35                          #期望使用的最大线速度。
      lookahead_dist: 0.3                              #用于查找前瞻点的前瞻距离
      min_lookahead_dist: 0.3                          #使用速度缩放前瞻距离时的最小前瞻距离阈值
      max_lookahead_dist: 0.9                          #使用速度缩放前瞻距离时的最大前瞻距离阈值
      lookahead_time: 1.5                              #投射速度以找到速度缩放的前瞻距离所需的时间。也称为前瞻增益。
      rotate_to_heading_angular_vel: 0.4               #如果使用旋转至航向，则这是要使用的角速度。
      transform_tolerance: 0.1                         #TF 变换容差
      use_velocity_scaled_lookahead_dist: false        #是否使用速度缩放的前瞻距离或常数lookahead_distance
      min_approach_linear_velocity: 0.05               # 接近目标时应用的最小速度阈值
      approach_velocity_scaling_dist: 1.0              # 距离变换路径末端的积分距离，在此距离处开始应用速度缩放。
      #注意：默认为代价地图的前向范围减去一个代价地图单元长度。
      use_collision_detection: true                    #是否启用碰撞检测。
      max_allowed_time_to_collision_up_to_carrot: 1.0  #use_collision_detection为真，投射速度命令以检查碰撞的时间true。它被限制为所选前瞻距离的最大距离。
      use_regulated_linear_velocity_scaling: true      #是否使用受控的曲率特征
      use_cost_regulated_linear_velocity_scaling: true #是否使用受管制的接近障碍物功能
      regulated_linear_scaling_min_radius: 0.9         #触发调节功能的转弯半径。请记住，转弯越急，半径就越小
      regulated_linear_scaling_min_speed: 0.25         #受调节特征能够发送的最小速度，以确保即使在高曲率的高成本空间中仍可实现过程。
      use_rotate_to_heading: false                      # 使用完整规划器时是否启用旋转到粗略航向和目标方向。
      #注意：建议对除阿克曼机器人之外的所有机器人类型启用，因为阿克曼机器人无法原地旋转。
      rotate_to_heading_min_angle: 0.785               #use_rotate_to_heading如果启用，则路径方向和起始机器人方向之间的差异将触发原地旋转。
      max_angular_accel: 10.0                           #旋转至航向时允许的最大角加速度（如果启用）
      max_robot_pose_search_dist: 10.0                 #沿路径搜索最接近机器人姿势的最大综合距离。#-->10.0
      #注意：默认设置为最大代价地图范围，因此除非本地代价地图内存在循环，否则不应手动设置。
      use_interpolation: false                         #启用路径上姿势之间的插值以进行前瞻点选择。帮助稀疏路径避免引起不连续的指令速度。
      cost_scaling_dist: 0.6 #use_cost_regulated_linear_velocity_scaling如果启用，则触发线速度缩放的最小障碍物距离。
      #注意：设置的值应小于或等于inflation_radiuscostmap 膨胀层中设置的值，因为膨胀用于计算与障碍物的距离
      cost_scaling_gain: 1.0 #乘数增益应小于或等于 1.0，用于在 范围内有障碍物时进一步调整速度cost_scaling_dist。
      #注意：值越低，减速越快。
      inflation_cost_scaling_factor: 3.0               #局部代价地图中膨胀层设置的值cost_scaling_factor。
      #注意：该值应与使用膨胀单元格值准确计算与障碍物的距离完全相同
      goal_dist_tol: 0.08
      allow_reversing: true
      #参数参考：https://github.com/ros-navigation/navigation2/blob/humble/nav2_regulated_pure_pursuit_controller/README.md
controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0  #成本地图更新频率
      publish_frequency: 2.0 #将成本图发布到话题的频率
      global_frame: odom_combined      #全局框架
      robot_base_frame: base_footprint #机器人底座框架
      use_sim_time: False  #仿真时间
      rolling_window: true #成本地图是否应随机器人基座框架滚动
      width: 3             #代价地图的宽度（m）
      height: 3            #代价地图的高度（m）
      resolution: 0.05     #代价地图1像素的分辨率，以米为单位
      #robot_radius: 0.20   #机器人半径，如果未提供足迹坐标，则使用机器人半径。
      footprint: "[ [-0.09, -0.185], [-0.09, 0.185], [0.4,0.185], [0.4, -0.185] ]"
      plugins: ["voxel_layer","inflation_layer"] #插件包括:{“体素层”，“障碍层”，“膨胀层”}
      inflation_layer:                             #膨胀层参数
        plugin: "nav2_costmap_2d::InflationLayer"  #膨胀层插件。
        cost_scaling_factor: 3.0                   #成本缩放因子，决定障碍物成本随距离的递减速度。
        inflation_radius: 0.25                     #膨胀半径
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"      #体素层插件。
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0                              #体素地图的起始Z坐标
        z_resolution: 0.05                         #体素地图的Z轴分辨率
        z_voxels: 16                               #体素地图的Z轴体素数量
        max_obstacle_height: 2.0                   #可检测障碍物的最大高度（米）
        mark_threshold: 0                          #标记体素的阈值
        observation_sources: scan                  #观测源
        scan:
          topic: /scan
          max_obstacle_height: 2.0                  #可检测障碍物的最大高度（米）
          clearing: True                            #是否启用障碍物清除功能
          marking: True                             #是否启用障碍物标记功能
          data_type: "LaserScan"                    #数据类型
          raytrace_max_range: 10.0                  #控制光线追踪从代价地图中清除障碍物的最大范围 
          raytrace_min_range: 0.0                  #控制光线追踪从代价地图中清除障碍物的最大范围 
          obstacle_max_range: 2.5                   #控制代价地图上标记障碍物的最大范围
          obstacle_min_range: 0.0                   #控制代价地图上标记障碍物的最小范围

      always_send_full_costmap: True                 #是否每次更新时都发送完整的成本图，而不是更新
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0             #成本地图更新频率
      publish_frequency: 1.0            #将成本图发布到话题的频率
      global_frame: map                 #全局框架
      robot_base_frame: base_footprint  #机器人底座框架
      use_sim_time: False               #仿真时间 
      #robot_radius: 0.20                #机器人半径
      footprint: "[ [-0.09, -0.185], [-0.09, 0.185], [0.4,0.185], [0.4, -0.185] ]"
      resolution: 0.05                  #全局地图1像素的分辨率，以米为单位
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"] #插件包括：{“静态层”，“障碍层”，“膨胀层”}
      obstacle_layer:  #障碍层参数
        plugin: "nav2_costmap_2d::ObstacleLayer" #障碍层插件
        enabled: True
        observation_sources: scan                  #观测源
        scan:
          topic: /scan
          max_obstacle_height: 2.0                 #可检测障碍物的最大高度（米）
          clearing: True                           #是否启用障碍物清除功能
          marking: True                            #是否启用障碍物标记功能
          data_type: "LaserScan"                   #数据类型
          raytrace_max_range: 10.0                 #控制光线追踪从代价地图中清除障碍物的最大范围 
          raytrace_min_range: 0.0                  #控制光线追踪从代价地图中清除障碍物的最大范围 
          obstacle_max_range: 2.5                  #控制代价地图上标记障碍物的最大范围
          obstacle_min_range: 0.0                  #控制代价地图上标记障碍物的最小范围
      static_layer: #静态层参数
        plugin: "nav2_costmap_2d::StaticLayer"     #静态层插件
        map_subscribe_transient_local: True
      inflation_layer: #膨胀层参数
        plugin: "nav2_costmap_2d::InflationLayer"  #膨胀层插件
        cost_scaling_factor: 3.0                   #成本缩放因子，决定障碍物成本随距离的递减速度。
        inflation_radius: 0.3                     #膨胀半径
      always_send_full_costmap: True               #是否每次更新时都发送完整的成本图，而不是更新
  global_costmap_client:
    ros__parameters:
      use_sim_time: False
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "turtlebot3_world.yaml"

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0                #尝试保存地图的超时时间（秒）
    free_thresh_default: 0.25            #占用网格的自由空间最大概率阈值
    occupied_thresh_default: 0.65        #占用网格的占用空间最小概率阈值
    map_subscribe_transient_local: True  #地图话题的 QoS 设置

planner_server: #规划器服务器参数
  ros__parameters:
    planner_plugins: ["GridBased"]
    use_sim_time: False
    expected_planner_frequency: 20.0     #预期的规划器频率。如果当前频率小于预期频率，则显示警告消息。
    GridBased:
      plugin: "nav2_smac_planner/SmacPlannerHybrid" #Smac Hybrid-A* 规划器
      tolerance: 0.5                      # 如果无法达到精确的姿势，则规划的容差(单位m)
      downsample_costmap: false           # 是否将代价图下采样至另一个分辨率以进行搜索
      downsampling_factor: 1              # 对代价图进行下采样的乘数因子
      allow_unknown: false                # 允许在未知空间搜索
      max_iterations: 1000000             # 失败前搜索的最大迭代次数（以防无法到达），设置为 -1 以禁用
      max_on_approach_iterations: 1000    # 在公差范围内尝试达到目标的最大迭代次数，仅限 2D
      max_planning_time: 3.5              # 规划器进行规划、平滑和上采样的最大时间（以秒为单位）。
      motion_model_for_search: "REEDS_SHEPP"    # 2D Moore, Von Neumann; Hybrid Dubin, Redds-Shepp; State Lattice set internally
      cost_travel_multiplier: 2.0         #应用于搜索以避开高成本区域的成本乘数。
      # For 2D: Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      angle_quantization_bins: 64         #用于 SE2 搜索的角度箱数量。这可以是任何偶数，但好的基线是 64 或 72（以 5 度为增量）
      # For Hybrid/Lattice nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
      analytic_expansion_ratio: 3.5       #规划器将尝试以与该值和最小启发式方法成比例的频率完成分析扩展。
      # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
      minimum_turning_radius: 0.770        #最小转弯半径
      # For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
      reverse_penalty: 2.1                #如果反向搜索，则对 SE2 节点应用启发式惩罚。
      # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.15                #如果在搜索中改变方向（例如从左到右），则对 SE2 节点应用启发式惩罚。
      # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
      non_straight_penalty: 1.50          #如果在非直线方向上搜索，则对 SE2 节点应用启发式惩罚。
      # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 1.7                   #应用于 SE2 节点的姿势成本的启发式惩罚。
      # For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      lookup_table_size: 20.0               #距离窗口的缓存大小
      # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: True        #缓存障碍启发式，默认False
      # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.     
      smoother:
        max_iterations: 1000 #平滑器平滑路径的最大迭代次数，以限制潜在的计算。
        w_smooth: 0.3 #应用于平滑数据点的平滑权重
        w_data: 0.2 #应用权重平滑以保留原始数据信息
        tolerance: 1.0e-10 #终止平滑会话的参数容差变化量
#参数参考：https://docs.nav2.org/configuration/packages/smac/configuring-smac-hybrid.html?highlight=nav2_smac_planner      
 
planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10 #TF transform tolerance.
      max_its: 1000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw           #用于在局部代价地图上进行碰撞检查的原始代价地图主题。
    footprint_topic: local_costmap/published_footprint #局部代价地图框架中的足迹主题。
    cycle_frequency: 10.0 #运行行为插件的频率。
    behavior_plugins: ["spin", "backup", "drive_on_heading", "wait"] #插件包括：{“旋转”、“备份”、“前进”、“等待”}
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    global_frame: odom_combined
    robot_base_frame: base_footprint
    transform_tolerance: 0.1 #TF 变换容差
    use_sim_time: False
    simulate_ahead_time: 2.0 #提前模拟
    max_rotational_vel: 0.3  #最大旋转速度（弧度/秒）
    min_rotational_vel: 0.05 #最小旋转速度（弧度/秒）
    rotational_acc_lim: 0.3  #最大旋转加速度（rad/s^2）

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    loop_rate: 20 #循环速率
    stop_on_failure: false #如果单个航点失败，是否使操作任务失败。如果为 false，将继续到下一个航点。
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200 #机器人到达每个航点后休眠/等待的时间（以毫秒为单位）
#waypoint_follower 参数参考
#https://docs.nav2.org/configuration/packages/configuring-waypoint-follower.html?highlight=stop_on_failure
