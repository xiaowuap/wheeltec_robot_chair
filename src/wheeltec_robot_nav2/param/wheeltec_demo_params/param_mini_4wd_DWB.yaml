amcl:
  ros__parameters:
    use_sim_time: False
    alpha1: 0.5   #里程计的旋转估计中来自旋转的预期过程噪声
    alpha2: 0.2   #里程计的旋转估计中来自平移的预期过程噪声
    alpha3: 0.2  #里程计的翻译估计中来自translation的预期过程噪声
    alpha4: 0.4  #里程计的平移估计中因旋转而产生的预期过程噪声
    alpha5: 0.2  #仅适用于 Omni 型号：translation噪音
    base_frame_id: "base_footprint" #机器人底座框架 
    beam_skip_distance: 0.5         #忽略似然场模型中大多数粒子不同意的光束。考虑跳过的最大距离（米）
    beam_skip_error_threshold: 0.9  #由于收敛性不好，未匹配地图后强制进行完全更新的光束百分比
    beam_skip_threshold: 0.3        #需要跳过的光束的百分比。
    do_beamskip: false              #是否在似然场模型中进行波束跳跃
    global_frame_id: "map"          #定位系统发布的坐标框架的名称
    lambda_short: 0.1               #模型 z_short 部分的指数衰减参数
    laser_likelihood_max_dist: 2.0  #在地图上进行障碍物膨胀的最大距离，用于似然场模型
    laser_max_range: 100.0          #要考虑的最大扫描范围，-1.0 将导致使用激光报告的最大范围
    laser_min_range: -1.0           #要考虑的最小扫描范围，-1.0 将导致使用激光报告的最小范围
    laser_model_type: "likelihood_field" #使用哪种模型，
    #beam、likelihood_field 或 unlikely_field_prob。与 unlikely_field 相同，但如果启用，则包含 beamskip 功能
    max_beams: 60                   #更新过滤器时每次扫描要使用多少个均匀分布的光束。
    max_particles: 2000             #允许的最大粒子数
    min_particles: 500              #允许的最小粒子数
    odom_frame_id: "odom_combined"  #使用哪个框架进行里程计
    pf_err: 0.02                    #粒子过滤器群体误差
    pf_z: 0.85                      #粒子过滤器群体密度
    recovery_alpha_fast: 0.0        #快速平均权重过滤器的指数衰减率，用于决定何时通过添加随机姿势进行恢复。
    recovery_alpha_slow: 0.0        #慢速平均权重过滤器的指数衰减率，用于决定何时通过添加随机姿势进行恢复。
    resample_interval: 2            #重采样之前所需的过滤器更新次数
    robot_model_type: "nav2_amcl::DifferentialMotionModel" #插件类的完全限定类型。
    #选项为“nav2_amcl::DifferentialMotionModel”和“nav2_amcl::OmniMotionModel”。

    save_pose_rate: 0.5             #将最后估计的姿势和协方差存储到参数服务器的最大速率（Hz）
    sigma_hit: 0.02                 #模型的 z_hit 部分中使用的高斯模型的标准差
    tf_broadcast: true              #将其设置为 false 以防止 amcl 发布全局框架和里程计框架之间的变换
    transform_tolerance: 0.3        #发布转换的容差
    update_min_a: 0.06              #执行过滤器更新之前需要进行旋转运动。
    update_min_d: 0.025             #执行过滤器更新之前需要进行平移运动
    z_hit: 0.7                      #模型的 z_hit 部分的混合权重，所有使用的 z 权重之和必须为 1。
    z_max: 0.001                    #模型的 z_max 部分的混合权重，所有使用的 z 权重之和必须为 1。
    z_rand: 0.059                   #模型的 z_rand 部分的混合权重，所有使用的 z 权重之和必须为 1。
    z_short: 0.24                   #模型中 z_short 部分的混合权重，所有使用的 z 权重之和必须为 1。
    scan_topic: scan                #要订阅的激光雷达

    # Initial Pose
    set_initial_pose: True #AMCL 从 initial_pose* 参数设置初始姿势，而不是等待 initial_pose 消息
    initial_pose.x: 0.0
    initial_pose.y: 0.0
    initial_pose.z: 0.0
    initial_pose.yaw: 0.0
    #Amcl参数解释参考：https://docs.nav2.org/configuration/packages/configuring-amcl.html

amcl_map_client:
  ros__parameters:
    use_sim_time: False

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator:
  ros__parameters:
    use_sim_time: False
    transform_tolerance: 0.1 #变换容差
    goal_reached_tol: 0.25 #接受姿势作为目标的容忍度(m)
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odom_combined
    bt_loop_duration: 10        #BT 执行每次迭代的持续时间（以毫秒为单位
    default_server_timeout: 20  #BT 操作节点等待操作服务器确认时的默认超时值（以毫秒为单位）
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    #plugin_lib_names: #行为树节点共享库列表，Humble后的版本默认包含所有NAV2 BT库，这里可以加入自定义BT节点
    error_code_names:
    - compute_path_error_code 
    - follow_path_error_code

# bt_navigator参数说明：https://docs.nav2.org/configuration/packages/configuring-bt-navigator.html?highlight=bt_navigator

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 20.0           #运行控制器的频率
    # min_x_velocity_threshold: 0.001      #最小 x 速度阈值
    # min_y_velocity_threshold: 0.5        #最小 y 速度阈值
    min_theta_velocity_threshold: 0.02   #最小速度阈值
    odom_topic: /odom_combined
    failure_tolerance: 0.3 #故障容忍度：被调用的控制器插件可以失败的最大持续时间(S)，设置为0表示禁用
    progress_checker_plugin: "progress_checker" #进度检查器，用于检查机器人进度的进度检查器插件的映射名称
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker" #目标检查器
    controller_plugins: ["FollowPath"]    #控制器插件

    # Progress checker parameters
    progress_checker: #进度检查器
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5 #所需运动半径
      movement_time_allowance: 10.0 #移动时间容差
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True
    general_goal_checker: #目标检查器
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25  #xy 目标容差
      yaw_goal_tolerance: 0.25 #yaw目标容差
    # DWB parameters
    FollowPath: 
      # plugin: "nav2_rotation_shim_controller::RotationShimController" #旋转控制器
      plugin: "dwb_core::DWBLocalPlanner" #内部控制器插件，用于旋转至航向后的实际控制行为
      # debug_trajectory_details: True #发布调试信息
      # angular_dist_threshold: 0.785
      # forward_sampling_distance: 0.5
      # rotate_to_heading_angular_vel: 1.8
      # max_angular_accel: 3.2
      # simulate_ahead_time: 1.0
      # rotate_to_goal_heading: True

      min_vel_x: 0.0      #最小速度X（米/秒）
      min_vel_y: 0.0       #最小速度y（米/秒）
      max_vel_x: 0.6       #最大速度X（米/秒）
      max_vel_y: 0.0       #最小速度y（米/秒）
      max_vel_theta: 1.5   #最大角速度（rad/s）
      min_speed_xy: 0.0    #最小平移速度（米/秒）
      max_speed_xy: 0.0    #最大平移速度（米/秒）
      min_speed_theta: -0.25 #最小角速度（rad/s）
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 2.5       #最大加速度X（m/s^2）
      acc_lim_y: 0.0       #最大加速度Y（m/s^2）
      acc_lim_theta: 1.0   #最大加速度旋转（rad/s^2）
      decel_lim_x: -0.5    #最大减速度X（m/s^2）
      decel_lim_y: 0.0     #最大减速度Y（m/s^2）
      decel_lim_theta: -0.5  #最大减速度旋转（rad/s^2）
      vx_samples: 20       #X 速度方向的速度样本数
      vy_samples: 0        #Y 速度方向的速度样本数
      vtheta_samples: 40   #angular 方向上的速度样本数量
      sim_time: 1.7        #LimitedAccelGenerator插件参数:提前模拟时间
      angular_granularity: 0.05 #StandardTrajectoryGenerator插件参数:Angular distance to project
      transform_tolerance: 0.2  #TF变换容差(S)
      xy_goal_tolerance: 0.25   #轨迹评论参数:满足目标完成标准的容忍度（m）
      trans_stopped_velocity: 0.25 #以下速度被认为在满足公差时停止（rad/s）
      short_circuit_trajectory_evaluation: True #找到最佳分数后，停止评估分数
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"] #要使用的评论插件列表
      BaseObstacle.scale: 1.0  #Weighed scale for critic
      PathAlign.scale: 32.0  #路径对齐批评家的尺度，覆盖本地默认值
      PathAlign.forward_point_distance: 0.1 #指向机器人前方向前看以计算角度变化
      GoalAlign.scale: 24.0    #目标对齐.尺度
      PathDist.scale: 32.0     #路径距离.比例
      GoalDist.scale: 24.0     #目标距离.比例
      RotateToGoal.scale: 32.0 # Weighed scale for critic.
      RotateToGoal.slowing_factor: 5.0 #在旋转至目标时减慢机器人运动的因素
      RotateToGoal.lookahead_time: -1.0 #前瞻时间
      Oscillation.oscillation_reset_dist: 0.05
      Oscillation.oscillation_reset_angle: 0.05

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0  #成本地图更新频率
      publish_frequency: 2.0 #将成本图发布到话题的频率
      global_frame: odom_combined      #全局框架
      robot_base_frame: base_footprint #机器人底座框架
      use_sim_time: False  #仿真时间
      rolling_window: true #成本地图是否应随机器人基座框架滚动
      width: 3             #代价地图的宽度（m）
      height: 3            #代价地图的高度（m）
      resolution: 0.05     #代价地图1像素的分辨率，以米为单位
      #robot_radius: 0.20   #机器人半径，如果未提供足迹坐标，则使用机器人半径。
      footprint: "[ [-0.03, -0.0900], [-0.03, 0.0900], [0.2, 0.0900], [0.2, -0.0900] ]"
      plugins: ["voxel_layer","inflation_layer"] #插件包括:{“体素层”，“膨胀层”}
      inflation_layer:                             #膨胀层参数
        plugin: "nav2_costmap_2d::InflationLayer"  #膨胀层插件。
        cost_scaling_factor: 3.0                   #成本缩放因子，决定障碍物成本随距离的递减速度。
        inflation_radius: 0.15                     #膨胀半径
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"      #体素层插件。
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0                              #体素地图的起始Z坐标
        z_resolution: 0.05                         #体素地图的Z轴分辨率
        z_voxels: 16                               #体素地图的Z轴体素数量
        max_obstacle_height: 2.0                   #可检测障碍物的最大高度（米）
        mark_threshold: 0                          #标记体素的阈值
        observation_sources: scan                  #观测源
        scan:
          topic: /scan
          max_obstacle_height: 2.0                  #可检测障碍物的最大高度（米）
          clearing: True                            #是否启用障碍物清除功能
          marking: True                             #是否启用障碍物标记功能
          data_type: "LaserScan"                    #数据类型
          raytrace_max_range: 10.0                  #控制光线追踪从代价地图中清除障碍物的最大范围 
          raytrace_min_range: 0.0                  #控制光线追踪从代价地图中清除障碍物的最大范围 
          obstacle_max_range: 2.5                   #控制代价地图上标记障碍物的最大范围
          obstacle_min_range: 0.0                   #控制代价地图上标记障碍物的最小范围

      always_send_full_costmap: True                 #是否每次更新时都发送完整的成本图，而不是更新
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0             #成本地图更新频率
      publish_frequency: 1.0            #将成本图发布到话题的频率
      global_frame: map                 #全局框架
      robot_base_frame: base_footprint  #机器人底座框架
      use_sim_time: False               #仿真时间 
      #robot_radius: 0.20                #机器人半径
      footprint: "[ [-0.03, -0.0900], [-0.03, 0.0900], [0.2, 0.0900], [0.2, -0.0900] ]"
      resolution: 0.05                  #全局地图1像素的分辨率，以米为单位
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"] #插件包括：{“静态层”，“障碍层”，“膨胀层”}
      obstacle_layer:  #障碍层参数
        plugin: "nav2_costmap_2d::ObstacleLayer" #障碍层插件
        enabled: True
        observation_sources: scan                  #观测源
        scan:
          topic: /scan
          max_obstacle_height: 2.0                 #可检测障碍物的最大高度（米）
          clearing: True                           #是否启用障碍物清除功能
          marking: True                            #是否启用障碍物标记功能
          data_type: "LaserScan"                   #数据类型
          raytrace_max_range: 10.0                 #控制光线追踪从代价地图中清除障碍物的最大范围 
          raytrace_min_range: 0.0                  #控制光线追踪从代价地图中清除障碍物的最大范围 
          obstacle_max_range: 2.5                  #控制代价地图上标记障碍物的最大范围
          obstacle_min_range: 0.0                  #控制代价地图上标记障碍物的最小范围
      static_layer: #静态层参数
        plugin: "nav2_costmap_2d::StaticLayer"     #静态层插件
        map_subscribe_transient_local: True
      inflation_layer: #膨胀层参数
        plugin: "nav2_costmap_2d::InflationLayer"  #膨胀层插件
        cost_scaling_factor: 6.0                   #成本缩放因子，决定障碍物成本随距离的递减速度。
        inflation_radius: 0.2                    #膨胀半径
      always_send_full_costmap: True               #是否每次更新时都发送完整的成本图，而不是更新
  global_costmap_client:
    ros__parameters:
      use_sim_time: False
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "WHEELTEC.yaml"

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0                #尝试保存地图的超时时间（秒）
    free_thresh_default: 0.25            #占用网格的自由空间最大概率阈值
    occupied_thresh_default: 0.65        #占用网格的占用空间最小概率阈值
    map_subscribe_transient_local: True  #地图话题的 QoS 设置

planner_server: #规划器服务器参数
  ros__parameters:
    expected_planner_frequency: 20.0     #预期的规划器频率。如果当前频率小于预期频率，则显示警告消息。
    use_sim_time: False
    planner_plugins: ["GridBased"] #规划器插件类型，需要与BT Tree文件匹配
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true
      use_final_approach_orientation: False

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 0.1  #TF transform tolerance.
      max_its: 1000
      do_refinement: True

# behavior_server:
#   ros__parameters:
#     costmap_topic: local_costmap/costmap_raw           #用于在局部代价地图上进行碰撞检查的原始代价地图主题。
#     footprint_topic: local_costmap/published_footprint #局部代价地图框架中的足迹主题。
#     cycle_frequency: 10.0 #运行行为插件的频率。
#     behavior_plugins: ["spin", "backup", "drive_on_heading", "wait"] #插件包括：{“旋转”、“后退”、“前进”、“等待”}
#     spin:
#       plugin: "nav2_behaviors/Spin"
#     backup:
#       plugin: "nav2_behaviors/BackUp"
#     drive_on_heading:
#       plugin: "nav2_behaviors/DriveOnHeading"
#     wait:
#       plugin: "nav2_behaviors/Wait"
#     global_frame: odom_combined
#     robot_base_frame: base_footprint
#     transform_tolerance: 0.1 #TF 变换容差
#     use_sim_time: False
#     simulate_ahead_time: 2.0 #提前模拟
#     max_rotational_vel: 0.3  #最大旋转速度（弧度/秒）
#     min_rotational_vel: 0.05 #最小旋转速度（弧度/秒）
#     rotational_acc_lim: 0.3  #最大旋转加速度（rad/s^2）

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    loop_rate: 20 #循环速率
    stop_on_failure: false #如果单个航点失败，是否使操作任务失败。如果为 false，将继续到下一个航点。
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200 #机器人到达每个航点后休眠/等待的时间（以毫秒为单位）
#waypoint_follower 参数参考
#https://docs.nav2.org/configuration/packages/configuring-waypoint-follower.html?highlight=stop_on_failure
