amcl:
  ros__parameters:
    use_sim_time: False
    alpha1: 0.5   #里程计的旋转估计中来自旋转的预期过程噪声
    alpha2: 0.2   #里程计的旋转估计中来自平移的预期过程噪声
    alpha3: 0.2  #里程计的翻译估计中来自translation的预期过程噪声
    alpha4: 0.4  #里程计的平移估计中因旋转而产生的预期过程噪声
    alpha5: 0.2  #仅适用于 Omni 型号：translation噪音
    base_frame_id: "base_footprint" #机器人底座框架 
    beam_skip_distance: 0.5         #忽略似然场模型中大多数粒子不同意的光束。考虑跳过的最大距离（米）
    beam_skip_error_threshold: 0.9  #由于收敛性不好，未匹配地图后强制进行完全更新的光束百分比
    beam_skip_threshold: 0.3        #需要跳过的光束的百分比。
    do_beamskip: false              #是否在似然场模型中进行波束跳跃
    global_frame_id: "map"          #定位系统发布的坐标框架的名称
    lambda_short: 0.1               #模型 z_short 部分的指数衰减参数
    laser_likelihood_max_dist: 2.0  #在地图上进行障碍物膨胀的最大距离，用于似然场模型
    laser_max_range: 100.0          #要考虑的最大扫描范围，-1.0 将导致使用激光报告的最大范围
    laser_min_range: -1.0           #要考虑的最小扫描范围，-1.0 将导致使用激光报告的最小范围
    laser_model_type: "likelihood_field" #使用哪种模型，
    #beam、likelihood_field 或 unlikely_field_prob。与 unlikely_field 相同，但如果启用，则包含 beamskip 功能
    max_beams: 60                   #更新过滤器时每次扫描要使用多少个均匀分布的光束。
    max_particles: 2000             #允许的最大粒子数
    min_particles: 500              #允许的最小粒子数
    odom_frame_id: "odom_combined"  #使用哪个框架进行里程计
    pf_err: 0.02                    #粒子过滤器群体误差
    pf_z: 0.85                      #粒子过滤器群体密度
    recovery_alpha_fast: 0.0        #快速平均权重过滤器的指数衰减率，用于决定何时通过添加随机姿势进行恢复。
    recovery_alpha_slow: 0.0        #慢速平均权重过滤器的指数衰减率，用于决定何时通过添加随机姿势进行恢复。
    resample_interval: 1            #重采样之前所需的过滤器更新次数
    robot_model_type: "nav2_amcl::DifferentialMotionModel" #插件类的完全限定类型。
    #选项为“nav2_amcl::DifferentialMotionModel”和“nav2_amcl::OmniMotionModel”。

    save_pose_rate: 0.5             #将最后估计的姿势和协方差存储到参数服务器的最大速率（Hz）
    sigma_hit: 0.02                 #模型的 z_hit 部分中使用的高斯模型的标准差
    tf_broadcast: true              #将其设置为 false 以防止 amcl 发布全局框架和里程计框架之间的变换
    transform_tolerance: 0.3        #发布转换的容差
    update_min_a: 0.06              #执行过滤器更新之前需要进行旋转运动。
    update_min_d: 0.025             #执行过滤器更新之前需要进行平移运动
    z_hit: 0.5                      #模型的 z_hit 部分的混合权重，所有使用的 z 权重之和必须为 1。
    z_max: 0.05                    #模型的 z_max 部分的混合权重，所有使用的 z 权重之和必须为 1。
    z_rand: 0.5                   #模型的 z_rand 部分的混合权重，所有使用的 z 权重之和必须为 1。
    z_short: 0.05                   #模型中 z_short 部分的混合权重，所有使用的 z 权重之和必须为 1。
    scan_topic: scan                #要订阅的激光雷达

    # Initial Pose
    set_initial_pose: True #AMCL 从 initial_pose* 参数设置初始姿势，而不是等待 initial_pose 消息
    initial_pose.x: 0.0
    initial_pose.y: 0.0
    initial_pose.z: 0.0
    initial_pose.yaw: 0.0
    #Amcl参数解释参考：https://docs.nav2.org/configuration/packages/configuring-amcl.html

amcl_map_client:
  ros__parameters:
    use_sim_time: False

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator:
  ros__parameters:
    use_sim_time: False
    transform_tolerance: 0.1 #变换容差
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odom_combined
    bt_loop_duration: 10        #BT 执行每次迭代的持续时间（以毫秒为单位
    default_server_timeout: 20  #BT 操作节点等待操作服务器确认时的默认超时值（以毫秒为单位）
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    #plugin_lib_names: #行为树节点共享库列表，Humble后的版本默认包含所有NAV2 BT库，这里可以加入自定义BT节点
    error_code_names:
    - compute_path_error_code 
    - follow_path_error_code

# bt_navigator参数说明：https://docs.nav2.org/configuration/packages/configuring-bt-navigator.html?highlight=bt_navigator

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False                             
    controller_frequency: 30.0                      #运行控制器的频率 (hz)
    # min_x_velocity_threshold: -0.35           #最小 x 速度阈值
    # min_y_velocity_threshold: 0.35             #最小 y 速度阈值
    # min_theta_velocity_threshold: 0.001       #最小速度阈值
    controller_plugins: ["FollowPath"]              # 用于处理请求和参数的控制器插件的映射名称列表
    odom_topic: /odom_combined                      #里程计话题名称

    progress_checker_plugin: "progress_checker"
    goal_checker_plugin: "goal_checker" # "precise_goal_checker"

    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0

    goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 1.75
      stateful: True

    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController" #MPPI控制器
      time_steps: 56    #候选轨迹中的时间步长（点）数
      model_dt: 0.05    #每个时间步长的时间步长的长度dt（以秒为单位）是预测范围
      batch_size: 2000  #在给定迭代中从当前最佳控制序列中随机采样的候选轨迹的数量
      vx_std: 0.2       #Vx 的抽样标准差
      vy_std: 0.0       #Vy 的抽样标准差
      wz_std: 0.4       #Wz（角速度）的抽样标准差
      vx_max: 0.35       #目标最大前进速度（米/秒）
      vx_min: -0.35      #目标最大反向速度（米/秒）
      vy_max: 0.0       #如果使用Omni运动模型，目标最大横向速度（m/s）
      wz_max: 2.0       #最大旋转速度（弧度/秒）
      ax_max: 1.5
      ax_min: -1.5
      ay_max: 0.0
      az_max: 1.5
      iteration_count: 1 #迭代次数
      prune_distance: 1.5 #路径上距离机器人最近点的距离（米）
      enforce_path_inversion: true
      transform_tolerance: 0.1 #使用 TF（s）进行数据转换的时间容差
      temperature: 0.3 #根据成本选择轨迹，0表示使用成本最佳的控制，巨大的值将导致仅取所有轨迹的平均值而不考虑成本。
      gamma: 0.015 #平滑度（高）和低能耗（低）之间的权衡,保持默认值
      motion_model: "Ackermann" #用于轨迹规划的所需运动模型。选项包括DiffDrive、Omni或Ackermann。
      visualize: false #是否发布调试轨迹以供可视化。
      TrajectoryVisualizer: #轨迹可视化
        trajectory_step: 5 #轨迹之间的步骤可视化以对候选轨迹池进行下采样
        time_step: 3 #轨迹上点之间的步骤可视化以降低轨迹密度的采样
      AckermannConstraints:
        min_turning_r: 0.25 #最小转弯半径（阿克曼运动模型）
      critics: ["ConstraintCritic", "ObstaclesCritic", "GoalCritic", "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic", "PathAngleCritic", "PreferForwardCritic"] #评论插件
      ConstraintCritic: #修复超出设定的动态或运动学约束的轨迹
        enabled: true
        cost_power: 1 
        cost_weight: 4.0  #权重参数
      
      GoalAngleCritic: #当距离目标较近时，GoalAngleCritic会激励导航以达到目标姿势的角度
        enabled: true
        cost_power: 1
        cost_weight: 3.0 #权重参数
        threshold_to_consider: 0.5  #考虑阈值：机器人与目标之间的最小距离（米），超过此距离则考虑角度目标成本

      GoalCritic: #当距离目标较近时，GoalCritic会激励机器人在空间上向目标导航
        enabled: true
        cost_power: 1
        cost_weight: 15.0 #权重参数
        threshold_to_consider: 1.4  #机器人与目标之间的最小距离（米），超过此距离则要考虑目标距离成本。

      ObstaclesCritic:
        enabled: true
        cost_power: 1
        repulsion_weight: 1.5 #权重参数，通常优先选择成本较低的空间中的路线。
        critical_weight: 30.0 #应用于临界碰撞的权重，用于collision_margin_distance防止近距离碰撞
        consider_footprint: false #是否使用点成本（如果机器人是圆形的或者计算能力低）或计算 SE2 足迹成本
        collision_cost: 10000.0 #应用于轨迹中真实碰撞的成本。
        collision_margin_distance: 0.1 #碰撞边缘距离，应该设置在0.05-0.2之间，请确保将此参数设置为预计机器人需要穿越的最窄空间
        near_goal_distance: 0.4 #靠近目标的距离（米）停止应用优先障碍物项，以允许机器人平稳地收敛到靠近障碍物的目标姿势，0.5 --> 0.6 -->0.3(Tues) 
        cost_scaling_factor: 5.0
        inflation_radius: 0.15  #膨胀半径，仅限Humble

      PreferForwardCritic: #激励机器人前进，而不是后退
        enabled: true
        cost_power: 1
        cost_weight: 1.5 #权重参数
        threshold_to_consider: 0.5 #机器人与目标之间的距离（米）停止考虑前锋并允许目标批评家接管。
      # Option to replace Cost and use Obstacles instead

      PathAlignCritic:  #PathAlignCritic会激励机器人与全局路径保持一致。它不实现路径跟随行为。
        enabled: true
        cost_power: 1
        cost_weight: 25.0 #权重参数
        max_path_occupancy_ratio: 0.07 #最大路径占用率
        trajectory_point_step: 4
        threshold_to_consider: 0.5 #机器人与目标之间的距离阈值，阈值符合则停止考虑路径对齐并允许目标批评家接管。
        offset_from_furthest: 20 #最远偏移量
        use_path_orientations: true #是否在路径对齐中考虑路径的方向

      PathAngleCritic: #路径角度评论，机器人在因累积角度误差较大而需要时进行急转弯。
        enabled: true
        cost_power: 1
        cost_weight: 4.0 #权重参数
        offset_from_furthest: 4 #最远偏移量，任何轨迹达到最远路径点之后的路径点数，用于计算相对于的路径角度。
        threshold_to_consider: 0.5 #机器人与目标之间的距离阈值，阈值符合允许目标批评家接管。
        max_angle_to_furthest: 1.0 #机器人与目标之间的角距离
        mode: 2

      PathFollowCritic: #路径跟随评论家激励机器人沿着路径前进。
        enabled: true
        cost_power: 1
        cost_weight: 15.0 #权重参数
        offset_from_furthest: 5
        threshold_to_consider: 1.4 #机器人与目标之间的距离阈值，停止考虑路径跟随，并允许目标评论家接管。
#参数参考：https://docs.nav2.org/configuration/packages/configuring-mppic.html


controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0  #成本地图更新频率
      publish_frequency: 2.0 #将成本图发布到话题的频率
      global_frame: odom_combined      #全局框架
      robot_base_frame: base_footprint #机器人底座框架
      use_sim_time: False  #仿真时间
      rolling_window: true #成本地图是否应随机器人基座框架滚动
      width: 3             #代价地图的宽度（m）
      height: 3            #代价地图的高度（m）
      resolution: 0.05     #代价地图1像素的分辨率，以米为单位
      #robot_radius: 0.20   #机器人半径，如果未提供足迹坐标，则使用机器人半径。
      footprint: "[ [-0.03, -0.0900], [-0.03, 0.0900], [0.2, 0.0900], [0.2, -0.0900] ]"
      plugins: ["voxel_layer","inflation_layer"] #插件包括:{“体素层”，“膨胀层”}
      inflation_layer:                             #膨胀层参数
        plugin: "nav2_costmap_2d::InflationLayer"  #膨胀层插件。
        cost_scaling_factor: 3.0                   #成本缩放因子，决定障碍物成本随距离的递减速度。
        inflation_radius: 0.1                     #膨胀半径
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"      #体素层插件。
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0                              #体素地图的起始Z坐标
        z_resolution: 0.05                         #体素地图的Z轴分辨率
        z_voxels: 16                               #体素地图的Z轴体素数量
        max_obstacle_height: 2.0                   #可检测障碍物的最大高度（米）
        mark_threshold: 0                          #标记体素的阈值
        observation_sources: scan                  #观测源
        scan:
          topic: /scan
          max_obstacle_height: 2.0                  #可检测障碍物的最大高度（米）
          clearing: True                            #是否启用障碍物清除功能
          marking: True                             #是否启用障碍物标记功能
          data_type: "LaserScan"                    #数据类型
          raytrace_max_range: 10.0                  #控制光线追踪从代价地图中清除障碍物的最大范围 
          raytrace_min_range: 0.0                  #控制光线追踪从代价地图中清除障碍物的最大范围 
          obstacle_max_range: 2.5                   #控制代价地图上标记障碍物的最大范围
          obstacle_min_range: 0.0                   #控制代价地图上标记障碍物的最小范围

      always_send_full_costmap: True                 #是否每次更新时都发送完整的成本图，而不是更新
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0             #成本地图更新频率
      publish_frequency: 1.0            #将成本图发布到话题的频率
      global_frame: map                 #全局框架
      robot_base_frame: base_footprint  #机器人底座框架
      use_sim_time: False               #仿真时间 
      #robot_radius: 0.20                #机器人半径
      footprint: "[ [-0.03, -0.0900], [-0.03, 0.0900], [0.2, 0.0900], [0.2, -0.0900] ]"
      resolution: 0.05                  #全局地图1像素的分辨率，以米为单位
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"] #插件包括：{“静态层”，“障碍层”，“膨胀层”}
      obstacle_layer:  #障碍层参数
        plugin: "nav2_costmap_2d::ObstacleLayer" #障碍层插件
        enabled: True
        observation_sources: scan                  #观测源
        scan:
          topic: /scan
          max_obstacle_height: 2.0                 #可检测障碍物的最大高度（米）
          clearing: True                           #是否启用障碍物清除功能
          marking: True                            #是否启用障碍物标记功能
          data_type: "LaserScan"                   #数据类型
          raytrace_max_range: 10.0                 #控制光线追踪从代价地图中清除障碍物的最大范围 
          raytrace_min_range: 0.0                  #控制光线追踪从代价地图中清除障碍物的最大范围 
          obstacle_max_range: 2.5                  #控制代价地图上标记障碍物的最大范围
          obstacle_min_range: 0.0                  #控制代价地图上标记障碍物的最小范围
      static_layer: #静态层参数
        plugin: "nav2_costmap_2d::StaticLayer"     #静态层插件
        map_subscribe_transient_local: True
      inflation_layer: #膨胀层参数
        plugin: "nav2_costmap_2d::InflationLayer"  #膨胀层插件
        cost_scaling_factor: 10.0                   #成本缩放因子，决定障碍物成本随距离的递减速度。
        inflation_radius: 0.25                     #膨胀半径
      always_send_full_costmap: True               #是否每次更新时都发送完整的成本图，而不是更新
  global_costmap_client:
    ros__parameters:
      use_sim_time: False
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "WHEELTEC.yaml"

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0                #尝试保存地图的超时时间（秒）
    free_thresh_default: 0.25            #占用网格的自由空间最大概率阈值
    occupied_thresh_default: 0.65        #占用网格的占用空间最小概率阈值
    map_subscribe_transient_local: True  #地图话题的 QoS 设置

planner_server: #规划器服务器参数
  ros__parameters:
    expected_planner_frequency: 20.0     #预期的规划器频率。如果当前频率小于预期频率，则显示警告消息。
    use_sim_time: False
    planner_plugins: ["GridBased"] #规划器插件类型，需要与BT Tree文件匹配
    GridBased:
      plugin: "nav2_smac_planner/SmacPlannerHybrid"
      tolerance: 0.25                     # tolerance for planning if unable to reach exact pose, in meters, for 2D node
      downsample_costmap: false           # whether or not to downsample the map
      downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: false                # allow traveling in unknown space
      max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 1000    # maximum number of iterations to attempt to reach goal once in tolerance, 2D only
      max_planning_time: 5.0              # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      motion_model_for_search: "REEDS_SHEPP"   # 2D Moore, Von Neumann; Hybrid Dubin, Redds-Shepp; State Lattice set internally
      cost_travel_multiplier: 2.0         # For 2D: Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      angle_quantization_bins: 72         # For Hybrid/Lattice nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
      analytic_expansion_ratio: 3.5       # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_cost: 200.0
      minimum_turning_radius: 0.25        # For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
      reverse_penalty: 1.2                # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      change_penalty: 0.3                 # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
      non_straight_penalty: 1.2          # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 2.0                   # For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      lookup_table_size: 20.0             # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: True      # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.     
      smooth_path: true
      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1.0e-10

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 0.1  #TF transform tolerance.
      max_its: 1000
      do_refinement: True

# behavior_server:
#   ros__parameters:
#     local_costmap_topic: local_costmap/costmap_raw
#     local_footprint_topic: local_costmap/published_footprint
#     global_costmap_topic: global_costmap/costmap_raw
#     global_footprint_topic: global_costmap/published_footprint
#     cycle_frequency: 10.0 #运行行为插件的频率。
#     behavior_plugins: ["spin", "backup", "drive_on_heading", "wait"] #插件包括：{“旋转”、“后退”、“前进”、“等待”}
#     spin:
#       plugin: "nav2_behaviors/Spin"
#     backup:
#       plugin: "nav2_behaviors/BackUp"
#     drive_on_heading:
#       plugin: "nav2_behaviors/DriveOnHeading"
#     wait:
#       plugin: "nav2_behaviors/Wait"
#     global_frame: odom_combined
#     robot_base_frame: base_footprint
#     transform_tolerance: 0.1 #TF 变换容差
#     use_sim_time: False
#     simulate_ahead_time: 2.0 #提前模拟
#     max_rotational_vel: 0.3  #最大旋转速度（弧度/秒）
#     min_rotational_vel: 0.05 #最小旋转速度（弧度/秒）
#     rotational_acc_lim: 0.3  #最大旋转加速度（rad/s^2）

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    loop_rate: 20 #循环速率
    stop_on_failure: false #如果单个航点失败，是否使操作任务失败。如果为 false，将继续到下一个航点。
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200 #机器人到达每个航点后休眠/等待的时间（以毫秒为单位）
#waypoint_follower 参数参考
#https://docs.nav2.org/configuration/packages/configuring-waypoint-follower.html?highlight=stop_on_failure
